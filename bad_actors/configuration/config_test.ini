[DEFAULT]
logger_name = root
logger_conf_file = configuration/logging.conf
start_date = date('2010-01-01 00:00:00')
end_date = date('2020-01-01 23:59:59')
step_size_in_sec = 315619200
#five days in sec = 432000
window_analyze_size_in_sec = 315619200
keep_results_for = 2246400
max_concurrent_jobs = 2
domain=Microblog
targeted_classes = ['author_osn_id','author_type', 'author_sub_type','author_guid']
social_network_url = "http://twitter.com/"
social_network_name = Twitter

[Logger]
logger_conf_file = configuration/logging.conf
logger_name = root
file_name = log/bad_actors.log
level = logging.INFO

[OperatingSystem]
linux=False
windows=True
;
[DB]
DB_path = data/input/
DB_name_prefix = test_bad_actors_
DB_name_suffix = .db
DB_path_to_extension = lib/extension-functions
dialect_name = sqlalchemy.dialects.sqlite

remove_on_setup = True
remove_on_teardown = True
dropall_on_setup = False
dropall_on_teardown = True
start_date = date('2010-01-01 00:00:00')

[XMLImporter]
xml_path = data/input/XMLs_for_tests/
#xml_path = data/input/test/

[TsvImporter]
FDL_source_path=data/input/test_offline_16/
date_format = %m/%d/%Y
;
[AppImporter]
data_folder = "data/input/app_data/old_app_data/"
bad_actor_threshold = 2
optional_classes = ["good_actor", "bad_actor"]

[RankAppImporter]
data_folder = "data/input/app_data/new_app_data/"
bad_actor_threshold = 2
rank_threshold = 2.0
optional_classes = ["good_actor", "bad_actor"]
;
[CreateAuthorTables]
;
;[PostCitationCreator]
;max_number_of_threads = 10000
;
;[PostDetector]
;keywords = "'Virtual TV'","'Online TV'","'Internet TV'","'Smart TV'"
;
;#[Preprocessor]
;#stopwords_file = data/english_stopwords.txt
;stopwords_file = data/german_stopwords.txt
;stemming = False
;stemming_language = ger
;
[BoostAuthorsModel]
seconds_in_slot_unit=60
boost_jump=4

;[FeatureExtractor]
;arff_file = data/output/bad_actors.arff
;
[BadActorsCollector]
; posible_actions = ['crawl_bad_actors_followers', 'crawl_bad_actors_retweeters','mark_missing_bad_retweeters_retrieved_from_vico']
actions = ['crawl_bad_actors_followers', 'crawl_bad_actors_retweeters']
targeted_twitter_author_id = 632699436
targeted_twitter_author_ids = [714689542092169216]
targeted_twitter_post_ids = [745601324989947904]
#targeted_twitter_post_id = 730072187990900736
#targeted_twitter_post_id = 734468142303305728
targeted_twitter_post_id = 738132164399636480
targeted_twitter_author_names = ['benny_metanya']
;targeted_twitter_author_names = ['annakiril3', 'LeviAvavilevi', 'benny_metanya', 'meggiewill5', 'amira_buzavgo',
;                                'TAringthon']

[Generic_Twitter_Crawler]

[TwitterApiRequester]
consumer_key = "<you'r consumer key>"
consumer_secret = "<you'r consumer secret>"
access_token_key = "<you'r consumer token>"
access_token_secret = "<you'r access token secret>"
user_id = <you'r user id>
screen_name = "<you'r screen name>"
[Twitter_Rest_Api]
#can be 1, 2, or 3
working_app_number = 3
maximal_get_friend_ids_requests_in_window = 15
maximal_get_follower_ids_requests_in_window = 15
maximal_get_user_requests_in_window = 180
maximal_user_ids_allowed_in_single_get_user_request = 100
num_of_requests_without_checking = 9999999999
num_of_twitter_status_id_requests_without_checking = 9999999999
num_of_twitter_timeline_requests_without_checking = 9999999999
maximal_number_of_retrieved_users = 1000
;
[Twitter_Crawler]
num_of_top_terms = 10
retrieve_news_by_keywords = ['security', 'google']
;actions = ['get_most_popular_posts_by_google_trends','get_posts_by_config_keywords','get_posts_by_topic_with_most_posts']
actions = ['get_posts_by_topic_with_most_posts']
;
[MissingDataComplementor]
possible_actions = ['fill_tweet_retweet_connection','fill_data_for_sources','fill_data_for_followers','fill_data_for_friends','fill_authors_time_line'
                   ,'assign_manually_labeled_authors','assign_acquired_and_crowdturfer_profiles','delete_acquired_authors','delete_manually_labeled_authors']

actions = ['fill_tweet_retweet_connection','fill_data_for_sources','fill_data_for_followers','fill_data_for_friends'
                     ,'assign_manually_labeled_authors','assign_acquired_and_crowdturfer_profiles','delete_acquired_authors','delete_manually_labeled_authors']
minimal_num_of_posts = 100
max_users_without_saving = 100
source_ids_for_fast_running = None
maximal_tweets_count_in_timeline = 200
limit_friend_follower_number = 5

[GloveWordEmbeddingModelCreator]
is_load_wikipedia_300d_glove_model = True
wikipedia_model_file_path = "data/input/glove/test_glove.6B.300d_small.txt"
table_name="wikipedia_model_300d"
targeted_fields_for_embedding=[{'source' :{"table_name": "posts", "id": "author_guid", "target_field": "content", "where_clauses": [{"field_name":1, "value": 1}]}},
                              {'source' :{"table_name": "posts", "id": "author_guid", "target_field": "title", "where_clauses": [{"field_name": 1, "value": 1}]}},
                               {'source' :{"table_name": "target_article_items", "id": "post_id", "target_field": "content", "where_clauses": [{"field_name":"type", "value": "paragraph"}]}}
                              ]

aggregation_functions_names = ['np.mean', 'min', 'max']

[GensimWordEmbeddingsModelTrainer]
saved_models_path = "data/output/test_word_embedding_models/"
table_name = "gensim_word_embedding_data"
max_vocabulary_size = 10000
number_of_dimensions_in_hidden_layer = 5
use_cbow = True
epochs = 4
window_size = 5
seed = 100
selected_optimizer = "None"
aggregation_functions_names = ['np.mean', 'min', 'max']
targeted_fields_for_embedding=[{'source' :{"table_name": "posts", "id": "author_guid", "target_field": "content", "where_clauses": [{"field_name":1, "value": 1}]}},
                              {'source' :{"table_name": "posts", "id": "author_guid", "target_field": "title", "where_clauses": [{"field_name": 1, "value": 1}]}},
                               {'source' :{"table_name": "target_article_items", "id": "post_id", "target_field": "content", "where_clauses": [{"field_name":"type", "value": "paragraph"}]}}
                              ]

[Word_Embeddings_Feature_Generator]
targeted_author_word_embeddings=[{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean", "where_clauses": [{"field_name":1, "value": 1}] },
                                {"table_name": "posts",  "targeted_field_name": "content", "word_embedding_type": "max", "where_clauses": [{"field_name":1, "value": 1}] },
                                 {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "min", "where_clauses": [{"field_name":1, "value": 1}] }]
max_objects_without_saving = 500

[Word_Embedding_Differential_Feature_Generator]
table_name = "wikipedia_model_300d"
pairs_targets=[ (  {"table_name": "target_articles", "id_field": "author_guid", "targeted_field_name": "title",
                                "where_clauses": [{"field_name":1, "value": 1}]},
                   {"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content",
                                "where_clauses": [{"field_name":1, "value": 1}]})   ]
aggregation_functions = ['min', 'sum', 'max', 'np.mean']
distance_functions = ["euclidean_distance", "cosine_similarity", "minkowski_distance", "manhattan_distance", "jaccard_index"]

;
;[BadActorsMarkup]
;bad_actors_file_name = vico_importer_bad_actors.csv
;potential_good_actors_file_name = potential_good_actors.csv
;path = data/output/
;backup_path = data\output\csv\backup\
;
;[PostCSVExporter]
;path = data/output/
;#file_name = data/output/bad_actors.arff
;
;[MysqlConnector]
;host = localhost
;user = bgu
;pwd = 4002ebf464f7c42fd106b091640253d6
;schema = bgu
;
;[DatasetBuilderConfig]
;clean_authors_features_table = True
;
[GraphBuilder_CoCitation]
connection_type = cocitation
max_objects_without_saving = 100000
min_number_of_cocited_posts = 1
min_number_of_posts_per_author = 1
num_of_random_authors_for_graph = None
;
[LDATopicModel]
number_of_topics=10
num_of_terms_in_topic = 12
stopword_file = lib/eng_stopwords.txt
stem_language = GER
;
[AutotopicModelCreator]
script_name = SOMWEB_LDA.r
r_script_path = D:\Program Files\R\R-3.4.1\bin\i386\RScript.exe
autotopics_dir = ../autotopics/
min_topics = 2
max_topics = 7
single_post_per_author = FALSE
thresh_low = 3
frequent_keywords_to_remove = []

[AutotopicExecutor]
;script_path = D:/somweb/trunk/software/autotopics/run_autotopics.R
script_path = D:\Work\BadActorsFolder\trunk\software\autotopics\run_autotopics.R
lda_model_path = D:\Work\BadActorsFolder\trunk\software\autotopics\lda_.RData
k = 10
r_script_path = D:\Program Files\R\R-3.4.1\bin\i386\RScript.exe
### Absolute path to db on which the calculation needs to be held
DB_path = D:\Work\BadActorsFolder\trunk\oftware\bad_actors\data\input
DB_name_prefix = test_bad_actors_
DB_name_suffix = .db
single_post_per_author = FALSE
;
;[GraphBuilder_Topics]
;min_distance_threshold = 0.9
;min_posts_count = 1
;
;[KeyAuthorsModel]
;
;[BoostAuthorsModel]
;seconds_in_slot_unit=60
;boost_jump=4
;
;[GraphBuilder_Citation]
;connection_type = citation
;max_objects_without_saving = 100000
;
;[FeatureExtractor]
;
;# ************** DATASET BUILDER MODULE **********************
;# **************** FEATURE EXTRACTOR MODULES ****************************
;
[BehaviorFeatureGenerator]
feature_list = ["average_minutes_between_posts", "average_posts_per_day_active_days", "average_posts_per_day_total"]
;
;[BoostScoresFeatureGenerator]
;feature_list = ["boost_score_avg", "boost_score_std_dev", "boost_score_sum", "boosting_timeslots_count",
;                     "count_authors_sharing_boosted_posts", "number_pointed_posts,number_pointers"]
;
;[KeyAuthorScoreFeatureGenerator]
;feature_list = ["sum_tfidf", "max_tfidf"]

[SyntaxFeatureGenerator]
feature_list = ["average_hashtags", "average_links", "average_user_mentions", "average_post_lenth" ]
;
;[AccountPropertiesFeatureGenerator]
;feature_list = ["account_age", "number_followers", "number_friends" , "friends_followers_ratio" ,
;                     "number_of_crawled_posts", "number_of_posts","default_profile","default_profile_image",
;                     "listed_count","verified", "screen_name_length", "author_screen_name", "author_type", "author_sub_type"]
;
[GraphFeatureGenerator_1]
graph_directed = False
graph_weights = True
graph_types = ["cocitation"]
algorithms = ["betweenness_centrality", "closeness_centrality", "clustering", "degree_centrality"]
aggregation_functions = ["mean", "std" ,"kurt", "skew"]
neighborhood_sizes = [1]
distances_from_labeled_authors = ["average_distances", "min_distances"]
;
[DistancesFromTargetedClassFeatureGenerator]
train_size = 0.8
distances_statistics = ["min", "mean"]
calculate_distances_for_unlabeled = True
#is_calculation_for_only_unlabeled_authors = False
#is_k_fold_cross_validation_for_manually_labeled_authors = False
##if k-fold is true
#k_fold_size_on_manually_labelled_authors = 10
## if k-fold is false then split into train - test
#split_to_train_and_test = True
#train_test_split_on_manually_labeled_authors = 0.8
;
[LinkPredictionFeatureExtractor]
measure_names = ['common_neighbors','jaccard_coefficient', 'preferential_attachment', 'adamic_adar_index', 'friends_measure']
aggregation_functions = ['min', 'max', 'mean', 'median', 'skew', 'kurtosis']
graph_types = {"common_post":'undirected',"citation":'directed'}
targeted_class_field_name = author_type
;targeted_class_field_name = author_sub_type
;optional_classes = ["private", "company", "news_feed", "bot", "spammer"]
;num_of_anchor_authors_per_optional_class = 5
property_node_field_names = ["author_type", "author_sub_type"]

[Known_Words_Number_Feature_generator]
word_lists_path = "data\input\known_words"
word_lists_names = ["subjects", "contractions"]
targeted_fields = [{"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}]
;
[AnchorAuthorsCreator]
targeted_class_num_of_authors_dict = {"bad_actor": 3, "good_actor": 3}
targeted_class_dict = {"good_actor" : 0, "bad_actor": 1}
targeted_class_field_name = 'author_type'
num_of_anchor_authors_per_optional_class = 3
;



[TimelineOverlapVisualizationGenerator]
common_posts_threshold = 4
output_dir = "overlapping_visualization_from_test"
output_path = "data/output"
;
[TumblrImporter]
actions = ["parse_posts", "parse_authors"]
tsv_input_files = data/input/tumblr_tsv_files/tsvs_for_tests/simple_parsing/
tsv_test_files_syntax_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/test_syntax_feature_generator/
tsv_test_files_behavior_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/test_behavior_feature_generator/
tsv_test_files_key_author_score_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_key_author_score_feature_generator/
tsv_test_files_boost_score_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_boost_score_feature_generator/
tsv_test_files_account_properties_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_account_properties_feature_generator/
tsv_test_files_graph_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_graph_feature_generator/
tsv_authors_file_name = authors.tsv
tsv_posts_file_name = posts.tsv
tsv_author_connections_file_name = author_connections.tsv
authors_header = ["tumblog_id", "activity_time_epoch", "tumblr_blog_name", "tumblr_blog_title", "tumblr_blog_description",
                    "tumblr_blog_url", "tumblr_blog_theme", "is_group_blog", "is_primary", "is_private", "created_time_epoch",
                    "updated_time_epoch", "timezone", "language", "blog_classifier"
                 ]

posts_header = [ "post_id",	"activity_time_epoch", "tumblog_id", "is_private", "post_title", "post_url",  "post_short_url", "post_slug",
                 "post_type", "post_caption", "post_state",	"post_format", "post_reblog_key", "post_note_count", "post_tags",
                 "post_highlighted", "post_content", "reblogged_from_post_id", "reblogged_from_metadata"," generator", "created_time_epoch",
                 "updated_time_epoch", "is_submission", "mentions",	"source_title",	"source_url", "post_classifier", "blog_classifier"
               ]

author_connections_header = [ "tumblog_id",	"followed_tumblog_id", "activity_time_epoch" ]

[Clickbait_Feature_Generator]
feature_list = [
                "num_of_characters_in_post_title",
                "num_of_characters_in_article_title",
                "num_of_characters_in_article_description",
                "average_num_of_characters_in_article_keywords",
                "average_num_of_characters_in_article_captions",
                "average_num_of_characters_in_article_paragraphs",
                "num_of_characters_in_post_image_text",
                "diff_num_of_characters_post_title_and_article_title",
                "diff_num_of_characters_post_title_and_article_description",
                "diff_num_of_characters_post_title_and_article_keywords",
                "diff_num_of_characters_post_title_and_article_captions",
                "diff_num_of_characters_post_title_and_article_paragraphs",
                "diff_num_of_characters_post_title_and_post_image_text",
                "diff_num_of_characters_article_title_and_article_description",
                "diff_num_of_characters_article_title_and_article_keywords",
                "diff_num_of_characters_article_title_and_article_captions",
                "diff_num_of_characters_article_title_and_article_paragraphs",
                "diff_num_of_characters_article_title_and_post_image_text",
                "diff_num_of_characters_article_description_and_article_keywords",
                "diff_num_of_characters_article_description_and_article_captions",
                "diff_num_of_characters_article_description_and_article_paragraphs",
                "diff_num_of_characters_article_description_and_post_image_text",
                "diff_num_of_characters_article_keywords_and_article_captions",
                "diff_num_of_characters_article_keywords_and_article_paragraphs",
                "diff_num_of_characters_article_keywords_and_post_image_text",
                "diff_num_of_characters_article_captions_and_article_paragraphs",
                "diff_num_of_characters_article_captions_and_post_image_text",
                "diff_num_of_characters_article_paragraphs_and_post_image_text",
                "num_of_characters_ratio_article_title_and_post_title",
                "num_of_characters_ratio_article_description_and_post_title",
                "num_of_characters_ratio_article_keywords_and_post_title",
                "num_of_characters_ratio_article_captions_and_post_title",
                "num_of_characters_ratio_article_paragraphs_post_title",
                "num_of_characters_ratio_post_image_text_and_post_title",
                "num_of_characters_ratio_article_description_and_article_title",
                "num_of_characters_ratio_article_keywords_and_article_title",
                "num_of_characters_ratio_article_captions_and_article_title",
                "num_of_characters_ratio_article_paragraphs_and_article_title",
                "num_of_characters_ratio_post_image_text_and_article_title",
                "num_of_characters_ratio_article_keywords_and_article_description",
                "num_of_characters_ratio_article_captions_and_article_description",
                "num_of_characters_ratio_article_paragraphs_and_article_description",
                "num_of_characters_ratio_post_image_text_and_article_description",
                "num_of_characters_ratio_article_captions_and_article_keywords",
                "num_of_characters_ratio_article_paragraphs_and_article_keywords",
                "num_of_characters_ratio_post_image_text_and_article_keywords",
                "num_of_characters_ratio_article_paragraphs_and_article_captions",
                "num_of_characters_ratio_post_image_text_and_article_captions",
                "num_of_characters_ratio_post_image_text_and_article_paragraphs",
                "num_of_words_in_post_title",
                "num_of_words_in_article_title",
                "num_of_words_in_article_description",
                "average_num_of_words_in_article_keywords",
               "average_num_of_words_in_article_captions",
                "average_num_of_words_in_article_paragraphs","num_of_words_in_post_image_text",
                "diff_num_of_words_post_title_and_article_title",
                "diff_num_of_words_post_title_and_article_description",
                "diff_num_of_words_post_title_and_article_keywords",
                "diff_num_of_words_post_title_and_article_captions",
                "diff_num_of_words_post_title_and_article_paragraphs",
                "diff_num_of_words_post_title_and_post_image_text",
                "diff_num_of_words_article_title_and_article_description",
                "diff_num_of_words_article_title_and_article_keywords",
                "diff_num_of_words_article_title_and_article_captions",
                "diff_num_of_words_article_title_and_article_paragraphs",
                "diff_num_of_words_article_title_and_post_image_text",
                "diff_num_of_words_article_description_and_article_keywords",
                "diff_num_of_words_article_description_and_article_captions",
                "diff_num_of_words_article_description_and_article_paragraphs",
                "diff_num_of_words_article_description_and_post_image_text",
                "diff_num_of_words_article_keywords_and_article_captions",
                "diff_num_of_words_article_keywords_and_article_paragraphs",
                "diff_num_of_words_article_keywords_and_post_image_text",
                "diff_num_of_words_article_captions_and_article_paragraphs",
                "diff_num_of_words_article_captions_and_post_image_text",
                "diff_num_of_words_article_paragraphs_and_post_image_text",
                "num_of_words_ratio_article_title_and_post_title",
                "num_of_words_ratio_article_description_and_post_title",
                "num_of_words_ratio_article_keywords_and_post_title",
                "num_of_words_ratio_article_captions_and_post_title",
                "num_of_words_ratio_article_paragraphs_post_title",
                "num_of_words_ratio_post_image_text_and_post_title",
                "num_of_words_ratio_article_description_and_article_title",
                "num_of_words_ratio_article_keywords_and_article_title",
                "num_of_words_ratio_article_captions_and_article_title",
                "num_of_words_ratio_article_paragraphs_and_article_title",
                "num_of_words_ratio_post_image_text_and_article_title",
                "num_of_words_ratio_article_keywords_and_article_description",
                "num_of_words_ratio_article_captions_and_article_description",
                "num_of_words_ratio_article_paragraphs_and_article_description",
                "num_of_words_ratio_post_image_text_and_article_description",
                "num_of_words_ratio_article_captions_and_article_keywords",
                "num_of_words_ratio_article_paragraphs_and_article_keywords",
                "num_of_words_ratio_post_image_text_and_article_keywords",
                "num_of_words_ratio_article_paragraphs_and_article_captions",
                "num_of_words_ratio_post_image_text_and_article_captions",
                "num_of_words_ratio_post_image_text_and_article_paragraphs",
                "num_of_article_keywords_exist_in_post_title",
                "num_of_article_keywords_exist_in_article_title",
                "num_of_article_keywords_exist_in_article_description",
                "num_of_article_keywords_exist_in_article_captions",
                "num_of_article_keywords_exist_in_article_paragraphs",
                "post_creation_hour",
                "num_of_article_paragraphs",
                "num_of_article_captions",
                "num_of_article_keywords",
                "num_of_at_signs_in_post_title",
                "num_of_at_signs_in_article_title",
                "num_of_at_signs_in_article_captions",
                "num_of_at_signs_in_article_paragraphs",
                "num_of_number_signs_in_post_title",
                "num_of_number_signs_in_article_title",
                "num_of_number_signs_in_article_description",
                "num_of_number_signs_in_article_captions",
                "num_of_number_signs_in_article_paragraphs",
                "num_of_question_marks_in_post_title",
                "num_of_question_marks_in_article_title",
                "num_of_question_marks_in_article_description",
                "num_of_question_marks_in_article_captions",
                "num_of_question_marks_in_article_paragraphs",
                "num_of_colon_signs_in_post_title",
                "num_of_colon_signs_in_article_title",
                "num_of_colon_signs_in_article_description",
                "num_of_colon_signs_in_article_captions",
                "num_of_colon_signs_in_article_paragraphs",
                "num_of_retweet_signs_in_post_title",
                "num_of_retweet_signs_in_article_title",
                "num_of_retweet_signs_in_article_description",
                "num_of_retweet_signs_in_article_captions",
                "num_of_retweet_signs_in_article_paragraphs",
                "num_of_commas_in_post_title",
                "num_of_commas_in_article_title",
                "num_of_commas_in_article_description",
                "num_of_commas_in_article_captions",
                "num_of_commas_in_article_pargaraphs",
               "num_of_ellipsis_in_post_title",
               "num_of_ellipsis_in_article_title",
               "num_of_ellipsis_in_article_description",
               "num_of_ellipsis_in_article_captions",
               "num_of_ellipsis_in_article_pargaraphs",
               "num_of_formal_words_in_post_title",
               "num_of_formal_words_in_article_title",
               "num_of_formal_words_in_article_description",
               "num_of_formal_words_in_article_keywords",
               "num_of_formal_words_in_article_captions",
               "num_of_formal_words_in_article_paragraphs",
               "num_of_formal_words_in_post_image_text",
               "num_of_informal_words_in_post_title",
               "num_of_informal_words_in_article_title",
               "num_of_informal_words_in_article_description",
               "num_of_informal_words_in_article_keywords",
               "num_of_informal_words_in_article_captions",
               "num_of_informal_words_in_article_paragraphs",
               "num_of_informal_words_in_post_image_text",
               "percent_of_formal_words_in_post_title",
               "percent_of_formal_words_in_article_title",
               "percent_of_formal_words_in_article_description",
               "percent_of_formal_words_in_article_keywords",
               "percent_of_formal_words_in_post_image_text",
               "percent_of_informal_words_in_post_title",
               "percent_of_informal_words_in_article_title",
               "percent_of_informal_words_in_article_description",
               "percent_of_informal_words_in_article_keywords",
               "percent_of_informal_words_in_post_image_text",
               "number_of_uppercase_words_in_post_title",
               "number_of_uppercase_words_in_article_title",
               "number_of_uppercase_words_in_article_description",
               "number_of_uppercase_words_in_article_captions",
               "number_of_uppercase_words_in_article_paragraphs",
               "number_of_uppercase_words_in_article_keywords",
               "number_of_uppercase_image_words",
               "are_all_post_title_words_uppercase",
               "are_all_article_title_words_uppercase",
               "are_all_article_keywords_uppercase",
               "are_all_article_captions_uppercase",
               "are_all_article_paragraph_uppercase",
               "are_all_article_image_text_uppercase",
               "num_of_nouns_in_post_title",
               "num_of_nouns_in_article_title",
               "num_of_nouns_in_article_description",
               "num_of_nouns_in_article_description",
               "num_of_nouns_in_article_captions",
               "num_of_nouns_in_article_paragraphs",
               "num_of_nouns_in_article_keywords",
               "num_of_nouns_in_article_image",
               "num_of_verbs_in_post_title",
               "num_of_verbs_in_article_title",
               "num_of_verbs_in_article_description",
               "num_of_verbs_in_article_description",
               "num_of_verbs_in_article_captions",
               "num_of_verbs_in_article_paragraphs",
               "num_of_verbs_in_article_keywords",
               "num_of_verbs_in_article_image",
               "num_of_adjs_in_post_title",
               "num_of_adjs_in_article_title",
               "num_of_adjs_in_article_description",
               "num_of_adjs_in_article_description",
               "num_of_adjs_in_article_captions",
               "num_of_adjs_in_article_paragraphs",
               "num_of_adjs_in_article_keywords",
               "num_of_adjs_in_article_image",
               "num_of_stopwords_in_article_captions",
               "num_of_stopwords_in_article_paragraphs",
               "num_of_stopwords_in_image_text",
               "num_of_stopwords_in_post_title",
               "num_of_stopwords_in_article_title",
               "num_of_stopwords_in_article_description",
               "num_of_stopwords_in_article_keywords",
               "num_of_stopwords_in_image_text",
               "contains_quotation_post_title",
               "contains_quotation_article_title",
               "contains_quotation_article_description",
               "contains_quotation_article_captions",
               "contains_quotation_article_keywords",
               "contains_quotation_article_paragraph",
               "contains_quotation_post_image"
   ]

[TsvImporter]
FDL_source_path=data/input/test_offline_16/
date_format = %m/%d/%Y

[AppImporter]
data_folder = "data/input/app_data/old_app_data/"
bad_actor_threshold = 2
optional_classes = ["good_actor", "bad_actor"]

[RankAppImporter]
data_folder = "data/input/app_data/new_app_data/"
bad_actor_threshold = 2
rank_threshold = 2.0
optional_classes = ["good_actor", "bad_actor"]

[CreateAuthorTables]

[PostCitationCreator]
max_number_of_threads = 10000

[PostDetector]
keywords = "'Virtual TV'","'Online TV'","'Internet TV'","'Smart TV'"

#[Preprocessor]
#stopwords_file = data/english_stopwords.txt
stopwords_file = data/german_stopwords.txt
stemming = False
stemming_language = ger

[BoostAuthorsModel]
seconds_in_slot_unit=60
boost_jump=4

[FeatureExtractor]
arff_file = data/output/bad_actors.arff

[BadActorsCollector]
; posible_actions = ['crawl_bad_actors_followers', 'crawl_bad_actors_retweeters','mark_missing_bad_retweeters_retrieved_from_vico']
actions = ['crawl_bad_actors_followers', 'crawl_bad_actors_retweeters']
targeted_twitter_author_id = 632699436
targeted_twitter_author_ids = [714689542092169216]
targeted_twitter_post_ids = [745601324989947904]
#targeted_twitter_post_id = 730072187990900736
#targeted_twitter_post_id = 734468142303305728
targeted_twitter_post_id = 738132164399636480
targeted_twitter_author_names = ['benny_metanya']
;targeted_twitter_author_names = ['annakiril3', 'LeviAvavilevi', 'benny_metanya', 'meggiewill5', 'amira_buzavgo',
;                                'TAringthon']

[Twitter_Rest_Api]
#can be 1, 2, or 3
working_app_number = 3
maximal_get_friend_ids_requests_in_window = 15
maximal_get_follower_ids_requests_in_window = 15
maximal_get_user_requests_in_window = 180
maximal_user_ids_allowed_in_single_get_user_request = 100
num_of_requests_without_checking = 9999999999
num_of_twitter_status_id_requests_without_checking = 9999999999
num_of_twitter_timeline_requests_without_checking = 9999999999
maximal_number_of_retrieved_users = 1000

[Twitter_Crawler]
num_of_top_terms = 10
retrieve_news_by_keywords = ['security', 'google']
;actions = ['get_most_popular_posts_by_google_trends','get_posts_by_config_keywords','get_posts_by_topic_with_most_posts']
actions = ['get_posts_by_topic_with_most_posts']

[MissingDataComplementor]
;possible_actions = ['fill_tweet_retweet_connection','fill_data_for_sources','fill_data_for_followers','fill_data_for_friends','fill_authors_time_line'
;                   ,'assign_manually_labeled_authors','assign_acquired_and_crowdturfer_profiles','delete_acquired_authors','delete_manually_labeled_authors']

actions = ['fill_tweet_retweet_connection','fill_data_for_sources','fill_data_for_followers','fill_data_for_friends'
                     ,'assign_manually_labeled_authors','assign_acquired_and_crowdturfer_profiles','delete_acquired_authors','delete_manually_labeled_authors']
minimal_num_of_posts = 100
max_users_without_saving = 100
source_ids_for_fast_running = None
maximal_tweets_count_in_timeline = 200
limit_friend_follower_number = 5

[BadActorsMarkup]
bad_actors_file_name = vico_importer_bad_actors.csv
potential_good_actors_file_name = potential_good_actors.csv
path = data/output/
backup_path = data\output\csv\backup\

[PostCSVExporter]
path = data/output/
#file_name = data/output/bad_actors.arff

[MysqlConnector]
host = localhost
user = bgu
pwd = 4002ebf464f7c42fd106b091640253d6
schema = bgu

[DatasetBuilderConfig]
clean_authors_features_table = True

[GraphBuilder_CoCitation]
connection_type = cocitation
max_objects_without_saving = 100000
min_number_of_cocited_posts = 1
min_number_of_posts_per_author = 1
num_of_random_authors_for_graph = None

[LDAModelTemp]
number_of_topics=10
num_of_terms_in_topic = 12
stopword_file = lib/eng_stopwords.txt
stem_language = ENG

[LDATopicModel]
number_of_topics=10
num_of_terms_in_topic = 12
stopword_file = lib/eng_stopwords.txt
stem_language = ENG

[AutotopicModelCreator]
script_name = SOMWEB_LDA.r
r_script_path = D:/Program Files/R/R-3.4.2/bin/RScript.exe
autotopics_dir = ../autotopics/
min_topics = 2
max_topics = 7
single_post_per_author = FALSE
thresh_low = 1
frequent_keywords_to_remove = 'say', 'may', 'new'

[AutotopicExecutor]
script_path = D:/Work/BadActorsFolder/trunk/software/autotopics/run_autotopics.R
lda_model_path = D:/Work/BadActorsFolder/trunk/software/autotopics/lda_.RData
k = 10
r_script_path = D:/Program Files/R/R-3.4.2/bin/RScript.exe
### Absolute path to db on which the calculation needs to be held
DB_path = D:/Work/BadActorsFolder/trunk/software/bad_actors/data/input
DB_name_prefix = test_bad_actors_
DB_name_suffix = .db
single_post_per_author = FALSE

[GraphBuilder_Topics]
min_distance_threshold = 0.9
min_posts_count = 1

[KeyAuthorsModel]

[BoostAuthorsModel]
seconds_in_slot_unit=60
boost_jump=4

[GraphBuilder_Citation]
connection_type = citation
max_objects_without_saving = 100000

[FeatureExtractor]

# ************** DATASET BUILDER MODULE **********************
# **************** FEATURE EXTRACTOR MODULES ****************************

[BehaviorFeatureGenerator]
feature_list = ["average_minutes_between_posts", "average_posts_per_day_active_days", "average_posts_per_day_total"]

[BoostScoresFeatureGenerator]
feature_list = ["boost_score_avg", "boost_score_std_dev", "boost_score_sum", "boosting_timeslots_count",
                     "count_authors_sharing_boosted_posts", "number_pointed_posts,number_pointers"]

[KeyAuthorScoreFeatureGenerator]
feature_list = ["sum_tfidf", "max_tfidf"]

[SyntaxFeatureGenerator]
feature_list = ["average_hashtags", "average_links", "average_user_mentions", "average_post_lenth" ]

[AccountPropertiesFeatureGenerator]
feature_list = ["account_age", "number_followers", "number_friends" , "friends_followers_ratio" ,
                     "number_of_crawled_posts", "number_of_posts","default_profile","default_profile_image",
                     "listed_count","verified", "screen_name_length", "author_screen_name", "author_type", "author_sub_type"]

[GraphFeatureGenerator_1]
graph_directed = False
graph_weights = True
graph_types = ["cocitation"]
algorithms = ["betweenness_centrality", "closeness_centrality", "clustering", "degree_centrality"]
aggregation_functions = ["mean", "std" ,"kurt", "skew"]
neighborhood_sizes = [1]
distances_from_labeled_authors = ["average_distances", "min_distances"]

[DistancesFromTargetedClassFeatureGenerator]
train_size = 0.8
distances_statistics = ["min", "mean"]
calculate_distances_for_unlabeled = True
#is_calculation_for_only_unlabeled_authors = False
#is_k_fold_cross_validation_for_manually_labeled_authors = False
##if k-fold is true
#k_fold_size_on_manually_labelled_authors = 10
## if k-fold is false then split into train - test
#split_to_train_and_test = True
#train_test_split_on_manually_labeled_authors = 0.8

[Word_Embeddings_Comparison_Feature_Generator]
connection_types =[({"table_name": "posts", "targeted_field_name": "content","word_embedding_type": "max"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean"}),
                  ({"table_name": "posts", "targeted_field_name": "content","word_embedding_type": "min"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "max"}),
                  ({"table_name": "posts", "targeted_field_name": "content","word_embedding_type": "min"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "max"}),
                  ({"table_name": "posts", "targeted_field_name": "title","word_embedding_type": "min"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "max"})]
#similarity_functions = ["jaccard_similarity", "euclidean_distance"]
similarity_functions = ["euclidean_distance", "cosine_similarity", "minkowski_distance", "manhattan_distance", "jaccard_index", "subtruct_and_split"]

[Text_Anlalyser_Feature_Generator]
targeted_fields = [{"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}]
feature_list = [
               "num_of_chars_on_avg",
               "num_of_verbse_on_avarage",
               "num_of_adjectives_on_avg",
               "num_of_nouns_on_avg",
               "num_of_quotations_on_avg",
               "num_of_uppercase_words_in_post_on_avg",
               "number_of_precent_of_uppercased_posts",
               "num_of_formal_words_on_avg",
               "num_of_informal_words_on_avg",
               "precent_of_formal_words_on_avg",
               "num_of_question_marks_on_avg",
               "num_of_colons_on_avg",
               "num_of_comas_on_avg",
               "num_of_retweets_on_avg",
               "num_of_ellipsis_on_avg",
               "num_of_stop_words_on_avg",
               "precent_of_stop_words_on_avg"
               ]
;bellow - will run function on features from feature-list gotten by targeted fields
multi_feature_target_fields = [({"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}, {"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "title", "where_clauses": [{"field_name":1, "value": 1}]})]
multi_feature_feature_list = ["num_of_characters",
                             "num_of_verbse",
                             "num_of_nouns",
                             "num_of_adj",
                             "num_of_quotations",
                             "num_of_uppercase_words",
                             "num_of_foraml_words",
                             "num_of_informal_words",
                             "num_of_stopwords"]
multi_feature_function_names = ["diffarence", "ratio"]

[Sentiment_Feature_Generator]
feature_list = ["authors_posts_semantic_average_compound",
               "authors_posts_semantic_average_positive",
               "authors_posts_semantic_average_negative",
               "authors_posts_semantic_average_neutral"
;               "parse_sentence"
               ]
[LinkPredictionFeatureExtractor]
measure_names = ['common_neighbors','jaccard_coefficient', 'preferential_attachment', 'adamic_adar_index', 'friends_measure', 'temp_error']
aggregation_functions = ['min', 'max', 'mean', 'median', 'skew', 'kurtosis']
graph_types = {"common_post":'undirected',"citation":'directed'}
targeted_class_field_name = author_type
;targeted_class_field_name = author_sub_type
;optional_classes = ["private", "company", "news_feed", "bot", "spammer"]
;num_of_anchor_authors_per_optional_class = 5
property_node_field_names = ["author_type", "author_sub_type"]

[AnchorAuthorsCreator]
targeted_class_num_of_authors_dict = {"bad_actor": 3, "good_actor": 3}
targeted_class_dict = {"good_actor" : 0, "bad_actor": 1}
targeted_class_field_name = 'author_type'
num_of_anchor_authors_per_optional_class = 3

[KNNWithLinkPrediction_Refactored]
connection_type = cocitation
index_field_for_predictions = 'author_guid'
decision_models = ['majority_voting', 'weighted_majority_voting']
k = [1,3]
file_name = data/output/KNNWithLinkPrediction/predictions_refactored.csv
train_percent = 40
;only if train_precent is under 100
randomly_clasify_unlabled = True
clasification_options = {"bad_actor": 1, "good_actor": 0}

[KNNWithLinkPrediction]
results_path = data/output/KNNWithLinkPrediction/results_KNN_on_sim_functions.csv
predictions_per_iteration_path = data/output/KNNWithLinkPrediction/predictions_per_iteration.csv
k = [1,2,3]
#similarity_functions = ['bow', 'cocitation', 'common_posts', 'profile_similarity', 'text_similarity', 'topic']
similarity_functions = ['cocitation']
link_prediction_models = ['weighted_jaccard_coefficient','jaccard_coefficient']
order_of_results_dictionary = ['targeted_class_field_name', 'similarity_functions', 'k', 'decision_models']
compute_knn_based_on_lp = False
results_averaged_on_report = True
generate_anchors = False
num_iterations = 1
targeted_class_dict = {"good_actor" : 0, "bad_actor": 1}
targeted_class_field_name = ['author_type']
decision_models = ['bad_actors_neighbors', 'majority_voting', 'weighted_majority_voting']
column_names_for_results_table = ["Targeted_class", "Similarity_function", "K", "Decision_model", "Correctly_classified",
                                    "Incorrectly_classified", "Total", "AUC", "Accuracy", "Precision", "Recall"
                                 ]
results_file_name = results.txt
results_table_file_name = predictions.csv
path = data/output/KNNWithLinkPrediction/
index_field_for_predictions = author_guid
targeted_class_anchors_percent_size = [0.1]



[TimelineOverlapVisualizationGenerator]
common_posts_threshold = 4
output_dir = "overlapping_visualization_from_test"
output_path = "data/output"

[TumblrImporter]
tsv_input_files = data/input/tumblr_tsv_files/tsvs_for_tests/simple_parsing/
tsv_test_files_syntax_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/test_syntax_feature_generator/
tsv_test_files_behavior_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/test_behavior_feature_generator/
tsv_test_files_key_author_score_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_key_author_score_feature_generator/
tsv_test_files_boost_score_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_boost_score_feature_generator/
tsv_test_files_account_properties_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_account_properties_feature_generator/
tsv_test_files_graph_feature_generator = data/input/tumblr_tsv_files/tsvs_for_tests/tsv_test_files_graph_feature_generator/
tsv_authors_file_name = authors.tsv
tsv_posts_file_name = posts.tsv
tsv_author_connections_file_name = author_connections.tsv
authors_header = ["tumblog_id", "activity_time_epoch", "tumblr_blog_name", "tumblr_blog_title", "tumblr_blog_description",
                    "tumblr_blog_url", "tumblr_blog_theme", "is_group_blog", "is_primary", "is_private", "created_time_epoch",
                    "updated_time_epoch", "timezone", "language", "blog_classifier"
                 ]
[Twitter_Spam_Dataset_Importer]
original_tsv_location = "data/input/twitter_spam/test_Manually-Annotated-Tweets.tsv"
limit_per_crawl = 10



[Word_Embedding_Model_Creator]
is_load_wikipedia_300d_glove_model = True
wikipedia_model_file_path = "data/input/glove/test_glove.6B.300d_small.txt"
table_name="wikipedia_model_300d"
targeted_fields_for_embedding=[{"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]},
                              {"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "title", "where_clauses": [{"field_name": 1, "value": 1}]},
                               {"table_name": "target_article_items", "id_field": "post_id", "targeted_field_name": "content", "where_clauses": [{"field_name":"type", "value": "'paragraph'"}]}
                              ]
aggregation_functions_names = ['np.mean', 'min', 'max']

[Word_Embeddings_Feature_Generator]
targeted_author_word_embeddings=[{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean", "where_clauses": [{"field_name":1, "value": 1}] },
                                {"table_name": "posts",  "targeted_field_name": "content", "word_embedding_type": "max", "where_clauses": [{"field_name":1, "value": 1}] },
                                 {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "min", "where_clauses": [{"field_name":1, "value": 1}] }]
[GDLET_Full_Text_Search_API]
keywords = ['tech', 'google', 'cyber']
;keywords = []
;specific_site = toptechnews.com
specific_site =
;specific_site = "top-tech-news"
specific_language = english
maximal_returned_records = 1000

[GDLET_News_Importer]
num_of_top_terms = 100
author_name_as_domain = False
retrieve_news_by_keywords = True
filter_sentences = ["has banned your access based on your browser's signature",
    "This content, along with any associated source code and files, is licensed under The Code Project Open License (CPOL)"]
[Hoaxy_Importer]

[Importer_Labaler]
subjects = ["fake-news", "congressional-rules", "technology"]
posts_per_subject = 1000

[LinkPredictionEvaluator]
graph_types = {'cocitation':'undirected'}
measure_names = ['jaccard_coefficient']
negative_link_method = ['hard']
#negative_link_method = ['easy']
#easy means randomly forming pairs of nodes that are not connected in the graph
#hard means that these nodes also have to be at distance 2
number_of_links_to_sample = [25000]
number_iterations = 1

[Image_Downloader]
path_for_downloaded_images = 'data/output/Image_Downloader/'
