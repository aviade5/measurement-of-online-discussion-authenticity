[DEFAULT]
logger_name = root
logger_conf_file = configuration/logging.conf
start_date = date('2015-06-07 00:00:00')
end_date = date('2015-06-14 23:59:59')
step_size_in_sec = 691200
#step_size_in_sec = 12960000
#five days in sec = 432000
window_analyze_size_in_sec = 691200
keep_results_for = 2246400
max_concurrent_jobs = 1
domain=Microblog
#domain=Claim
#domain=Blog
#domain=News
#domain=Article
targeted_classes = ['author_type']
#social_network_name = Clickbait_Challenge
#social_network_name = Fake_News
#social_network_name = SBP-BRiMS_2017
social_network_name = Twitter
#social_network_name = PolitiFact
#social_network_url = "https://Clickbait_Challenge.com/"
#social_network_url = "https://SBP-BRiMS_2017.com/"
#social_network_url = "https://politifact.com/"
social_network_url = "https://twitter.com/"


[Logger]
logger_conf_file = configuration/logging.conf
logger_name = root
file_name = log/bad_actors.log
level = logging.INFO

[OperatingSystem]
linux=False
windows=True

[DB]
DB_path = data/input/
DB_name_prefix = bad_actors_
DB_name_suffix = .db
DB_path_to_extension = lib/extension-functions
dialect_name = sqlalchemy.dialects.sqlite

remove_on_setup = False
remove_on_teardown = False
dropall_on_setup = False
dropall_on_teardown = False


;[TumblrImporter]
;tsv_input_files = data/input/tumblr_200k/
;tsv_authors_file_name = authors_of_200k_posts.csv
;tsv_posts_file_name = 200k_posts.csv
;tsv_author_connections_file_name = sources_of_authors_posted_200k.csv
;actions = ['parse_authors', 'parse_posts', 'parse_author_connections']
;#actions = ['parse_author_connections']
;authors_header = ["tumblog_id", "activity_time_epoch", "tumblr_blog_name", "tumblr_blog_title", "tumblr_blog_description",
;                    "tumblr_blog_url", "tumblr_blog_theme", "is_group_blog", "is_primary", "is_private", "created_time_epoch",
;                    "updated_time_epoch", "timezone", "language", "blog_classifier"
;                 ]
;
;posts_header = [ "post_id",	"activity_time_epoch", "tumblog_id", "is_private", "post_title", "post_url",  "post_short_url", "post_slug",
;                 "post_type", "post_caption", "post_state",	"post_format", "post_reblog_key", "post_note_count", "post_tags",
;                 "post_highlighted", "post_content", "reblogged_from_post_id", "reblogged_from_metadata", "generator", "created_time_epoch",
;                 "updated_time_epoch", "is_submission", "mentions",	"source_title",	"source_url", "post_classifier", "blog_classifier"
;               ]
;
;author_connections_header = [ "tumblog_id",	"followed_tumblog_id", "activity_time_epoch" ]

######################################################################################################
# Impotera
######################################################################################################

;[XMLImporter]
;xml_path = data/input/XML/

;[CreateAuthorTables]

;[AppImporter]
;data_folder = "data/input/watson/"
;bad_actor_threshold = 2
;optional_classes = ["good_actor", "bad_actor"]

;[JSON_Importer]
;actions =["read_from_files"]
;json_path = "C:/DT_Projects/Dataset_from_Dima/TwitterAPI/TwitterTest/parsed/"
;path_bad_actor_csv = C:/DT_Projects/Dataset_from_Dima/Twitter/only_fake.csv
;author_type = bad_actor

;#[Clickbait_Challenge_Importer]
;actions =["read_from_files"]
;json_path = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set/clickbait17-train-170331/"
;;#json_path = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set/raw/clickbait17-validation-170616/"
;;#json_path = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set2/clickbait17-validation-170630/"
;;#json_path = "data/input/Important_datasets/Clickbait_Challenge/sets/unlabeled/raw/clickbait17-unlabeled-170429/"
;records_file_name = "instances.jsonl"
;truth_file_name = "truth.jsonl"
;;#truth_file_name = None
;dataset_type = None
;;#dataset_type = 'training'

;[Kaggle_Fake_News_Importer]
;post_is_author = True
;author_type = 'bad_actor'
;data_folder = 'data/input/Fake_news/fake.csv'
;
;[Politifact_Posts_Importer]
;subjects = ["fake-news", "china", "civil-rights", "congress", "congressional-rules", "elections", "ethics", "foreign-policy",
;                "government-regulation", "human-rights", "immigration", "islam", "israel", "marijuana", "military",
;            "natural-disasters", "campaign-advertising", "science", "state-budget", "technology", "terrorism", "voting-record",
;           "welfare", "transparency", "taxes", "supreme-court"]
;;http://www.politifact.com/api/subjects/all/xml/ - list of avialble subjects
;post_types = {u'true': u'true', u'false': u'false', u'pants-fire': u'false', u'mostly-true': u'true',
;                                u'half-true': u'false', u'full-flop': u'false', u'barely-true': u'false',
;                                u'half-flip': u'false', None: None, u'': u''}
;posts_per_subject = 50

;[PostDetector]
;keywords = "'Virtual TV'","'Online TV'","'Internet TV'","'Smart TV'"

;[CsvImporter]
;data_folder = "data/input/datasets/"

;[Hoaxy_Importer]
;past_hours = 55
;author_name_as_domain = False
;;start_date = ''
;;end_date =  ''

# ************** DATASET BUILDER MODULE **********************
[DatasetBuilderConfig]
clean_authors_features_table = False
;
;[BadActorsCollector]
;
;actions = ['crawl_bad_actors_followers', 'crawl_bad_actors_retweeters','mark_missing_bad_retweeters_retrieved_from_vico']
;targeted_twitter_author_ids = [
;                              714689542092169216, 714718743973208064, 714720434298683395, 714722116852191233
;                        ]
;targeted_twitter_post_ids = [
;                            745601324989947904, 745605511886835712, 745606629098414080, 745604117083660288,
;                            745925316707753984, 745598211977510912
;                        ]
;targeted_twitter_author_names = ['annakiril3', 'LeviAvavilevi', 'benny_metanya', 'meggiewill5', 'amira_buzavgo',
;                                'TAringthon'
;                        ]

;maximal_number_of_retrieved_users = 1000

;[MissingDataComplementor]
;;actions = ['fill_tweet_retweet_connection','fill_data_for_sources','fill_data_for_followers','fill_data_for_friends','fill_authors_time_line'
;;                   ,'assign_manually_labeled_authors','assign_acquired_and_crowdturfer_profiles','delete_acquired_authors','delete_manually_labeled_authors']
;actions = ['fill_tweet_retweet_connection']
;max_users_without_saving = 100
;minimal_num_of_posts = 100
;limit_friend_follower_number = 5
;# maximal_tweets_count_in_timeline maximal value is 200 according to Twitter API
;maximal_tweets_count_in_timeline = 5
;
;[Twitter_Crawler]
;num_of_top_terms = 10
;actions = ['get_most_popular_posts_by_google_trends']
;retrieve_news_by_keywords = []
#[Twitter_Spam_Dataset_Importer]
#original_tsv_location = "data/input/twitter_spam/Manually-Annotated-Tweets.tsv"
#limit_per_crawl = 1000

;[GDLET_Full_Text_Search_API]
;keywords = ['security', 'google']
;specific_site =
;#specific_site = cnn.com
;specific_language = english
;maximal_returned_records = 100
;
;[GDLET_News_Importer]
;author_name_as_domain = False
;retrieve_news_by_keywords = False
;filter_sentences = ["has banned your access based on your browser's signature",
;    "This content, along with any associated source code and files, is licensed under The Code Project Open License (CPOL)"]

#[Image_Tags_Extractor]
#auth_key = 'dcc38fa5b0d14b169118964ec17fec6f'
#model_id = 'aaa03c23b3724a16a56b629203edc62c'
#dataset_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set/clickbait17-train-170331/"
#max_objects_without_saving = 100000
#max_request_to_service = 50
#min_value_proba = 0.85

;[Preprocessor]
;remove_stopwords = True
;apply_stemming = True
;stopwords_file = data/english_stopwords.txt
;stemming_language = en
;is_preprocess_posts = True
;is_preprocess_authors = False
;max_objects_without_saving = 100000

;[TopicDistributionBuilder]

;[AutotopicModelCreator]
;script_name = SOMWEB_LDA.r
;r_script_path = C:/Program Files/R/R-3.3.2/bin/RScript.exe
;autotopics_dir = C:/DT_Projects/SomWeb/trunk/software/autotopics/
;min_topics = 5
;max_topics = 10
;single_post_per_author = FALSE
;thresh_low = 1
;frequent_keywords_to_remove = 'say', 'may', 'new'
;#frequent_keywords_to_remove = 'internet', 'secur', 'cyberwarfar', 'inform', 'mobil', 'network'

;[AutotopicExecutor]
;script_path = C:/DT_Projects/SomWeb/trunk/software/autotopics/run_autotopics.R
;lda_model_path = C:/DT_Projects/SomWeb/trunk/software/autotopics/lda_.RData
;k = 10
;r_script_path = C:/Program Files/R/R-3.3.2/bin/RScript.exe
;# Absolute path to db on which the calculation needs to be held
;DB_path = C:/DT_Projects/SomWeb/trunk/software/bad_actors/data/input
;DB_name_prefix = bad_actors_
;DB_name_suffix = .db
;single_post_per_author = FALSE

;[LDATopicModel]
;number_of_topics=10
;num_of_terms_in_topic = 12
;stopword_file = lib/eng_stopwords.txt
;stem_language = ENG

;[PostCitationCreator]
;max_number_of_threads = 10000

;[BoostAuthorsModel]
;seconds_in_slot_unit=60
;boost_jump=4

;[KeyAuthorsModel]

#[Word_Embedding_Model_Creator]
#is_load_wikipedia_300d_glove_model = True
#wikipedia_model_file_path = "data/input/glove/glove.6B.300d.txt"
#table_name="wikipedia_model_300d"
#targeted_fields_for_embedding=[
#                                {"table_name": "posts", "id_field": "post_id", "targeted_field_name": "content",
#                                "where_clauses": [{"field_name":1, "value": 1}]},
#                                {"table_name": "target_article_items", "id_field": "post_id", "targeted_field_name": "content",
#                                "where_clauses": [{"field_name":"type", "value": "'paragraph'"}]}
#                              ]
#;                              ,
#;                              {"table_name": "target_article_items", "id_field": "post_id", "targeted_field_name": "content",
#;                                "where_clauses ": [{"field_name":"type", "value": "'paragraph'"}]},
#;                              {"table_name": "target_article_items", "id_field": "post_id", "targeted_field_name": "content",
#;                                "where_clauses ": [{"field_name":"type", "value": "'caption'"}]
#;
#;                              ]
#aggregation_functions_names = ['np.mean', 'min', 'max']

;[OCR_Extractor]
;#images_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set/raw/clickbait17-validation-170616/media/"
;images_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/train_set/clickbait17-train-170331/media/"
;;images_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/unlabeled/raw/clickbait17-unlabeled-170429/media/"
;#images_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/train_set/clickbait17-train-170331/media/"
;#images_folder = "data/input/Important_datasets/Clickbait_Challenge/sets/training_validation_set2/clickbait17-validation-170630/media/"

##################################################################################
###########################Graph Builder##########################################
##################################################################################

#[GraphBuilder_Citation]
#connection_type = citation
#max_objects_without_saving = 100000
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None

#[GraphBuilder_CoCitation]
#connection_type = cocitation
#max_objects_without_saving = 100000
#min_number_of_cocited_posts = 1
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None

#[GraphBuilder_Topic]
#connection_type = topic
#max_objects_without_saving = 100000
#min_distance_threshold = 0.2
#min_posts_count = 1
###similarity 0.8
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None




;[GraphBuilder_Word_Embedding]
;connection_types =[{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean", "where_clauses": [{"field_name":1, "value": 1}},
;                   {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "min", "where_clauses": [{"field_name":1, "value": 1}},
;                   {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "max", "where_clauses": [{"field_name":1, "value": 1}}]
;connection_type = word_embeddings
;#similarity_functions = ["cosine_similarity", "manhattan_distance", "minkowski_distance"]
;similarity_functions = ["euclidean_distance", "manhattan_distance", "minkowski_distance", "cosine_similarity", "jaccard_similarity"]
;max_objects_without_saving = 500000
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None


;[GraphBuilder_Feature_Similarity]
;connection_types = ["topic_distr", "profile_prop"]
;#connection_types = ["profile_prop"]
;#connection_type below should stay empty
;connection_type =
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None
;max_objects_without_saving = 100000
;topic_distr_features_min_distance_threshold = 1
;topic_distr_features = ["retweet_count", "average_retweets", "average_hashtags", "average_links", "average_user_mentions",
;            "average_post_lenth", "number_of_crawled_posts"]
;
;profile_prop_features_min_distance_threshold = 1
;profile_prop_features = ["account_age", "number_followers", "number_friends" , "friends_followers_ratio" ,
;            "number_of_posts", "default_profile", "default_profile_image",
;            "listed_count", "verified", "screen_name_length", "average_minutes_between_posts",
;            "average_posts_per_day_active_days", "average_posts_per_day_total", "received_retweets_count"]



#[GraphBuilder_Common_Posts]
#connection_type = common_posts
#max_objects_without_saving = 100000
#min_number_of_common_posts = 1
#min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None

;[GraphBuilder_Hashtags]
;connection_type = hashtags
;max_objects_without_saving = 100000
;min_number_of_common_posts = 1
;min_number_of_posts_per_author = 1


;[GraphBuilder_Bag_Of_Words]
;connection_type = bag_of_words
;max_objects_without_saving = 100000
;min_number_of_posts_per_author = 1
;num_of_random_authors_for_graph = None



#[FeatureExtractor]
;table_name = "author_features"
#############################################################################
######################### FEATURE EXTRACTOR MODULES #########################
#############################################################################

#[OCR_Feature_Generator]
#feature_list = ["is_post_contain_image", "is_image_contain_text"]

;[TopicFeatureGenerator]

;[BehaviorFeatureGenerator]
;feature_list = ["average_minutes_between_posts", "average_posts_per_day_active_days", "average_posts_per_day_total", "retweet_count", "average_retweets", "received_retweets_count"]

;[BoostScoresFeatureGenerator]
;feature_list = ["boost_score_avg", "boost_score_std_dev", "boost_score_sum", "boosting_timeslots_count",
;              "count_authors_sharing_boosted_posts", "number_pointed_posts", "number_pointers"]

;[KeyAuthorScoreFeatureGenerator]
;feature_list = ["sum_tfidf", "max_tfidf"]

;[SyntaxFeatureGenerator]
;feature_list = ["average_hashtags", "average_links", "average_user_mentions", "average_post_lenth" ]


#[AccountPropertiesFeatureGenerator]
;;;feature_list = ["account_age", "number_followers", "number_friends" , "friends_followers_ratio" ,
;;;               "number_of_crawled_posts", "number_of_posts","default_profile","default_profile_image",
;;;               "listed_count","verified", "screen_name_length", "author_screen_name", "author_type", "author_sub_type"]
;feature_list = ["account_age", "author_screen_name", "author_type"]

;[Word_Embeddings_Feature_Generator]
;targeted_author_word_embeddings=[{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean"},
;                                {"table_name": "posts",  "targeted_field_name": "content", "word_embedding_type": "max"},
;                                 {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "min"}]

;[Sentiment_Feature_Generator]
;feature_list = ["authors_posts_semantic_average_compound",
;               "authors_posts_semantic_average_neutral",
;               "authors_posts_semantic_average_negative",
;               "authors_posts_semantic_average_positive"
;;               "parse_sentence"
;               ]
;
;[Text_Anlalyser_Feature_Generator]
;targeted_fields = [{"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}]
;feature_list = [
;               "num_of_chars_on_avg",
;               "num_of_verbse_on_avarage",
;               "num_of_adjectives_on_avg",
;               "num_of_nouns_on_avg",
;               "num_of_quotations_on_avg",
;               "num_of_uppercase_words_in_post_on_avg",
;               "number_of_precent_of_uppercased_posts",
;               "num_of_formal_words_on_avg",
;               "num_of_informal_words_on_avg",
;               "precent_of_formal_words_on_avg",
;               "num_of_question_marks_on_avg",
;               "num_of_colons_on_avg",
;               "num_of_comas_on_avg",
;               "num_of_retweets_on_avg",
;               "num_of_ellipsis_on_avg",
;               "num_of_stop_words_on_avg",
;               "precent_of_stop_words_on_avg"
;               ]
;;bellow - will run function on features from feature-list gotten by targeted fields
;multi_feature_target_fields = [({"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}, {"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "title", "where_clauses": [{"field_name":1, "value": 1}]})]
;multi_feature_feature_list = ["num_of_characters",
;                             "num_of_verbse",
;                             "num_of_nouns",
;                             "num_of_adj",
;                             "num_of_quotations",
;                             "num_of_uppercase_words",
;                             "num_of_foraml_words",
;                             "num_of_informal_words",
;                             "num_of_stopwords"]
;multi_feature_function_names = ["diffarence", "ratio"]


;[Clickbait_Feature_Generator]
;feature_list = [
;				 "num_of_characters_in_post_title",
;                "num_of_characters_in_article_title",
;                "num_of_characters_in_article_description",
;                "average_num_of_characters_in_article_keywords",
;                "average_num_of_characters_in_article_captions",
;                "average_num_of_characters_in_article_paragraphs",
;                "num_of_characters_in_post_image_text",
;                "diff_num_of_characters_post_title_and_article_title",
;                "diff_num_of_characters_post_title_and_article_description",
;                "diff_num_of_characters_post_title_and_article_keywords",
;                "diff_num_of_characters_post_title_and_article_captions",
;                "diff_num_of_characters_post_title_and_article_paragraphs",
;                "diff_num_of_characters_post_title_and_post_image_text",
;                "diff_num_of_characters_article_title_and_article_description",
;                "diff_num_of_characters_article_title_and_article_keywords",
;                "diff_num_of_characters_article_title_and_article_captions",
;                "diff_num_of_characters_article_title_and_article_paragraphs",
;                "diff_num_of_characters_article_title_and_post_image_text",
;                "diff_num_of_characters_article_description_and_article_keywords",
;                "diff_num_of_characters_article_description_and_article_captions",
;                "diff_num_of_characters_article_description_and_article_paragraphs",
;                "diff_num_of_characters_article_description_and_post_image_text",
;                "diff_num_of_characters_article_keywords_and_article_captions",
;                "diff_num_of_characters_article_keywords_and_article_paragraphs",
;                "diff_num_of_characters_article_keywords_and_post_image_text",
;                "diff_num_of_characters_article_captions_and_article_paragraphs",
;                "diff_num_of_characters_article_captions_and_post_image_text",
;                "diff_num_of_characters_article_paragraphs_and_post_image_text",
;                "num_of_characters_ratio_article_title_and_post_title",
;                "num_of_characters_ratio_article_description_and_post_title",
;                "num_of_characters_ratio_article_keywords_and_post_title",
;                "num_of_characters_ratio_article_captions_and_post_title",
;                "num_of_characters_ratio_article_paragraphs_post_title",
;                "num_of_characters_ratio_post_image_text_and_post_title",
;                "num_of_characters_ratio_article_description_and_article_title",
;                "num_of_characters_ratio_article_keywords_and_article_title",
;                "num_of_characters_ratio_article_captions_and_article_title",
;                "num_of_characters_ratio_article_paragraphs_and_article_title",
;                "num_of_characters_ratio_post_image_text_and_article_title",
;                "num_of_characters_ratio_article_keywords_and_article_description",
;                "num_of_characters_ratio_article_captions_and_article_description",
;                "num_of_characters_ratio_article_paragraphs_and_article_description",
;                "num_of_characters_ratio_post_image_text_and_article_description",
;                "num_of_characters_ratio_article_captions_and_article_keywords",
;                "num_of_characters_ratio_article_paragraphs_and_article_keywords",
;                "num_of_characters_ratio_post_image_text_and_article_keywords",
;                "num_of_characters_ratio_article_paragraphs_and_article_captions",
;                "num_of_characters_ratio_post_image_text_and_article_captions",
;                "num_of_characters_ratio_post_image_text_and_article_paragraphs",
;                "num_of_words_in_post_title",
;                "num_of_words_in_article_title",
;                "num_of_words_in_article_description",
;                "average_num_of_words_in_article_keywords",
;                "average_num_of_words_in_article_captions",
;                "average_num_of_words_in_article_paragraphs","num_of_words_in_post_image_text",
;                "diff_num_of_words_post_title_and_article_title",
;                "diff_num_of_words_post_title_and_article_description",
;                "diff_num_of_words_post_title_and_article_keywords",
;                "diff_num_of_words_post_title_and_article_captions",
;                "diff_num_of_words_post_title_and_article_paragraphs",
;                "diff_num_of_words_post_title_and_post_image_text",
;                "diff_num_of_words_article_title_and_article_description",
;                "diff_num_of_words_article_title_and_article_keywords",
;                "diff_num_of_words_article_title_and_article_captions",
;                "diff_num_of_words_article_title_and_article_paragraphs",
;                "diff_num_of_words_article_title_and_post_image_text",
;                "diff_num_of_words_article_description_and_article_keywords",
;                "diff_num_of_words_article_description_and_article_captions",
;                "diff_num_of_words_article_description_and_article_paragraphs",
;                "diff_num_of_words_article_description_and_post_image_text",
;                "diff_num_of_words_article_keywords_and_article_captions",
;                "diff_num_of_words_article_keywords_and_article_paragraphs",
;                "diff_num_of_words_article_keywords_and_post_image_text",
;                "diff_num_of_words_article_captions_and_article_paragraphs",
;                "diff_num_of_words_article_captions_and_post_image_text",
;                "diff_num_of_words_article_paragraphs_and_post_image_text",
;                "num_of_words_ratio_article_title_and_post_title",
;                "num_of_words_ratio_article_description_and_post_title",
;                "num_of_words_ratio_article_keywords_and_post_title",
;                "num_of_words_ratio_article_captions_and_post_title",
;                "num_of_words_ratio_article_paragraphs_post_title",
;                "num_of_words_ratio_post_image_text_and_post_title",
;                "num_of_words_ratio_article_description_and_article_title",
;                "num_of_words_ratio_article_keywords_and_article_title",
;                "num_of_words_ratio_article_captions_and_article_title",
;                "num_of_words_ratio_article_paragraphs_and_article_title",
;                "num_of_words_ratio_post_image_text_and_article_title",
;                "num_of_words_ratio_article_keywords_and_article_description",
;                "num_of_words_ratio_article_captions_and_article_description",
;                "num_of_words_ratio_article_paragraphs_and_article_description",
;                "num_of_words_ratio_post_image_text_and_article_description",
;                "num_of_words_ratio_article_captions_and_article_keywords",
;                "num_of_words_ratio_article_paragraphs_and_article_keywords",
;                "num_of_words_ratio_post_image_text_and_article_keywords",
;                "num_of_words_ratio_article_paragraphs_and_article_captions",
;                "num_of_words_ratio_post_image_text_and_article_captions",
;                "num_of_words_ratio_post_image_text_and_article_paragraphs",
;                "num_of_article_keywords_exist_in_post_title",
;                "num_of_article_keywords_exist_in_article_title",
;                "num_of_article_keywords_exist_in_article_description",
;                "num_of_article_keywords_exist_in_article_captions",
;                "num_of_article_keywords_exist_in_article_paragraphs",
;                "post_creation_hour",
;                "num_of_article_paragraphs",
;                "num_of_article_captions",
;                "num_of_article_keywords",
;                "num_of_at_signs_in_post_title",
;                "num_of_at_signs_in_article_title",
;                "num_of_at_signs_in_article_captions",
;                "num_of_at_signs_in_article_paragraphs",
;                "num_of_number_signs_in_post_title",
;                "num_of_number_signs_in_article_title",
;                "num_of_number_signs_in_article_description",
;                "num_of_number_signs_in_article_captions",
;                "num_of_number_signs_in_article_paragraphs",
;                "num_of_question_marks_in_post_title",
;                "num_of_question_marks_in_article_title",
;                "num_of_question_marks_in_article_description",
;                "num_of_question_marks_in_article_captions",
;                "num_of_question_marks_in_article_paragraphs",
;                "num_of_colon_signs_in_post_title",
;                "num_of_colon_signs_in_article_title",
;                "num_of_colon_signs_in_article_description",
;                "num_of_colon_signs_in_article_captions",
;                "num_of_colon_signs_in_article_paragraphs",
;                "num_of_retweet_signs_in_post_title",
;                "num_of_retweet_signs_in_article_title",
;                "num_of_retweet_signs_in_article_description",
;                "num_of_retweet_signs_in_article_captions",
;                "num_of_retweet_signs_in_article_paragraphs",
;                "num_of_commas_in_post_title",
;                "num_of_commas_in_article_title",
;                "num_of_commas_in_article_description",
;                "num_of_commas_in_article_captions",
;                "num_of_commas_in_article_pargaraphs",
;               "num_of_ellipsis_in_post_title",
;               "num_of_ellipsis_in_article_title",
;               "num_of_ellipsis_in_article_description",
;               "num_of_ellipsis_in_article_captions",
;               "num_of_ellipsis_in_article_pargaraphs",
;               "num_of_formal_words_in_post_title",
;               "num_of_formal_words_in_article_title",
;               "num_of_formal_words_in_article_description",
;               "num_of_formal_words_in_article_keywords",
;               "num_of_formal_words_in_article_captions",
;               "num_of_formal_words_in_article_paragraphs",
;               "num_of_formal_words_in_post_image_text",
;               "num_of_informal_words_in_post_title",
;               "num_of_informal_words_in_article_title",
;               "num_of_informal_words_in_article_description",
;               "num_of_informal_words_in_article_keywords",
;               "num_of_informal_words_in_article_captions",
;               "num_of_informal_words_in_article_paragraphs",
;               "num_of_informal_words_in_post_image_text",
;               "percent_of_formal_words_in_post_title",
;               "percent_of_formal_words_in_article_title",
;               "percent_of_formal_words_in_article_description",
;               "percent_of_formal_words_in_article_keywords",
;               "percent_of_formal_words_in_post_image_text",
;               "percent_of_informal_words_in_post_title",
;               "percent_of_informal_words_in_article_title",
;               "percent_of_informal_words_in_article_description",
;               "percent_of_informal_words_in_article_keywords",
;               "percent_of_informal_words_in_post_image_text",
;               "number_of_uppercase_words_in_post_title",
;               "number_of_uppercase_words_in_article_title",
;               "number_of_uppercase_words_in_article_description",
;               "number_of_uppercase_words_in_article_captions",
;               "number_of_uppercase_words_in_article_paragraphs",
;               "number_of_uppercase_words_in_article_keywords",
;               "number_of_uppercase_image_words",
;               "are_all_post_title_words_uppercase",
;               "are_all_article_title_words_uppercase",
;               "are_all_article_keywords_uppercase",
;               "are_all_article_captions_uppercase",
;               "are_all_article_paragraph_uppercase",
;               "are_all_article_image_text_uppercase",
;               "num_of_nouns_in_post_title",
;               "num_of_nouns_in_article_title",
;               "num_of_nouns_in_article_description",
;               "num_of_nouns_in_article_description",
;               "num_of_nouns_in_article_captions",
;               "num_of_nouns_in_article_paragraphs",
;               "num_of_nouns_in_article_keywords",
;               "num_of_nouns_in_article_image",
;               "num_of_verbs_in_post_title",
;               "num_of_verbs_in_article_title",
;               "num_of_verbs_in_article_description",
;               "num_of_verbs_in_article_description",
;               "num_of_verbs_in_article_captions",
;               "num_of_verbs_in_article_paragraphs",
;               "num_of_verbs_in_article_keywords",
;               "num_of_verbs_in_article_image",
;               "num_of_adjs_in_post_title",
;               "num_of_adjs_in_article_title",
;               "num_of_adjs_in_article_description",
;               "num_of_adjs_in_article_description",
;               "num_of_adjs_in_article_captions",
;               "num_of_adjs_in_article_paragraphs",
;               "num_of_adjs_in_article_keywords",
;               "num_of_adjs_in_article_image",
;               "num_of_stopwords_in_post_title",
;               "num_of_stopwords_in_article_title",
;               "num_of_stopwords_in_article_description",
;               "num_of_stopwords_in_article_captions",
;               "num_of_stopwords_in_article_keywords",
;               "num_of_stopwords_in_article_paragraphs",
;               "num_of_stopwords_in_image_text",
;               "num_of_stopwords_in_post_title",
;               "num_of_stopwords_in_article_title",
;               "num_of_stopwords_in_article_description",
;               "num_of_stopwords_in_article_captions",
;               "num_of_stopwords_in_article_keywords",
;               "num_of_stopwords_in_article_paragraphs",
;               "num_of_stopwords_in_image_text",
;               "contains_quotation_post_title",
;               "contains_quotation_article_title",
;               "contains_quotation_article_description",
;               "contains_quotation_article_captions",
;               "contains_quotation_article_keywords",
;               "contains_quotation_article_paragraph",
;               "contains_quotation_post_image"
;   ]

;[Image_Tags_Feature_Generator]
;actions = ['ordinal']
#representation_method = 'hashing'
#representation_method = 'ordinal'
#representation_method = 'dummy'
#feature_hasher_dimensions = 400


;[GraphFeatureGenerator_1]
;graph_directed = False
;graph_weights = True
;graph_types = ["cocitation", "common_posts", "topic"]
;#graph_types = ["common_posts"]
;algorithms = ["closeness_centrality", "clustering", "degree_centrality"]
;#algorithms = ["betweenness_centrality", "closeness_centrality", "clustering", "degree_centrality"]
;aggregation_functions = ["mean", "std" ,"kurt", "skew"]
;neighborhood_sizes = [1]
;distances_from_labeled_authors = ["average_distances", "min_distances"]

#[Word_Embeddings_Comparison_Feature_Generator]
#connection_types =[({"table_name": "posts", "targeted_field_name": "content",
#                  "word_embedding_type": "max"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean"}),
#                  ({"table_name": "posts", "targeted_field_name": "content",
#                  "word_embedding_type": "min"},{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "max"})]
#connection_type = word_embedding
##similarity_functions = ["subtruct_and_split"] will subtruct the two fields and than split each dimension to a feature
#similarity_functions = ["euclidean_distance", "cosine_similarity", "minkowski_distance", "manhattan_distance", "jaccard_index", "subtruct_and_split"]
#
#;[Word_Embeddings_Feature_Generator]
#;targeted_author_word_embeddings=[{"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "np.mean"},
#;                                {"table_name": "posts",  "targeted_field_name": "content", "word_embedding_type": "max"},
#;                                 {"table_name": "posts", "targeted_field_name": "content", "word_embedding_type": "min"}]

#[Known_Words_Number_Feature_generator]
#word_lists_path = "data\input\known_words"
#word_lists_names = ["subjects", "contractions"]
##word_lists_names = ["subjects", "hyperbolic", "contractions", "common"]
#targeted_fields = [{"table_name": "posts", "id_field": "author_guid", "targeted_field_name": "content", "where_clauses": [{"field_name":1, "value": 1}]}]

;[NodeLabeling]
;is_calculation_for_only_unlabeled_authors = False
;is_k_fold_cross_validation_for_manually_labeled_authors = False
;#if k-fold is true~
;k_fold_size_on_manually_labelled_authors = 10
;# if k-fold is false then split into train - test
;split_to_train_and_test = False
;train_test_split_on_manually_labeled_authors = 0.8


;[GraphFeatureGenerator_2]
;graph_directed = True
;graph_weights = True
;graph_types = ["citation"]
;algorithms = ["closeness_centrality", "clustering", "in_degree_centrality", "out_degree_centrality"]
;#algorithms = ["betweenness_centrality", "closeness_centrality", "clustering", "in_degree_centrality", "out_degree_centrality"]
;aggregation_functions = ["mean", "std" ,"kurt", "skew"]
;neighborhood_sizes = [1]
;distances_from_labeled_authors = ["average_distances", "min_distances"]


[AnchorAuthorsCreator]
targeted_class_num_of_authors_dict = {"good_actor": 100, "bad_actor": 100}
targeted_class_field_name = 'author_type'

[KNNWithLinkPrediction]
results_path = data/output/KNNWithLinkPrediction/SNAM_Virtual_TV_Manually_labeled_results_KNN_on_sim_functions.csv
predictions_per_iteration_path = data/output/KNNWithLinkPrediction/SNAM_Virtual_TV_Manually_labeled_predictions_per_iteration.csv
k = [1, 2, 3, 4, 5]
targeted_class_anchors_percent_size= [0.01, 0.02, 0.05, 0.1, 0.2, 0.4]
similarity_functions = ["common_posts", "topic", "bow", "text_similarity", "profile_similarity",
                        "posts_content_max_cosine_similarity", "posts_content_max_euclidean_distance",
                        "posts_content_max_jaccard_similarity", "posts_content_max_manhattan_distance",
                        "posts_content_max_minkowski_distance", "posts_content_min_cosine_similarity",
                        "posts_content_min_euclidean_distance", "posts_content_min_jaccard_similarity",
                        "posts_content_min_manhattan_distance", "posts_content_min_minkowski_distance",
                        "posts_content_np.mean_cosine_similarity", "posts_content_np.mean_euclidean_distance",
                        "posts_content_np.mean_jaccard_similarity", "posts_content_np.mean_manhattan_distance",
                        "posts_content_np.mean_minkowski_distance"
                        ]
link_prediction_models = ['jaccard_coefficient']
order_of_results_dictionary = ['targeted_class_field_name', 'similarity_functions', 'k', 'decision_models','targeted_class_anchors_percent_size']
#order_of_results_dictionary = ['targeted_class_field_name', 'similarity_functions', 'k', 'decision_models', 'link_prediction_models', 'targeted_class_anchors_percent_size']
compute_knn_based_on_lp = False
results_averaged_on_report = True
generate_anchors = True
num_iterations = 5
targeted_class_dict = {"good_actor" : 0, "bad_actor": 1}
targeted_class_field_name = ['author_type']
decision_models = ['majority_voting']
#decision_models = ['majority_voting', 'weighted_majority_voting']
column_names_for_results_table = ["Targeted_class", "Similarity_function", "K", "Decision_model", "Anchors Percent Size", "Correctly_classified",
                                    "Incorrectly_classified", "Total", "AUC", "Accuracy", "Precision", "Recall"
                                 ]
results_file_name = SNAM_Virtual_TV_Manually_labeled_knn_results.txt
results_table_file_name = SNAM_Virtual_TV_Manually_labeled_knn_results_table.csv
path = data/output/KNNWithLinkPrediction/
index_field_for_predictions = author_screen_name

;[LinkPredictionFeatureExtractor]
;measure_names = ['jaccard_coefficient', 'common_neighbors', 'preferential_attachment',
#'adamic_adar_index', 'total_friends', 'transitive_friends_v1', 'transitive_friends_v2', 'opposite_direction_friends', 'bayesian_promising']
;#measure_names = ['friends_measure']
;aggregation_functions = ['min', 'max', 'mean', 'median', 'skew', 'kurtosis']
;graph_types = {"topic":'undirected', "common_posts": "undirected", "cocitation": "undirected"}
;property_node_field_names = ["author_type"]
;#targeted_class_field_name = author_sub_type
;#optional_classes = ["private", "company", "news_feed", "bot", "spammer"]

;[Kernel_Performance_Evaluator]
;kernels = ['bag_of_words', 'common_posts', 'cocitation', 'topic', 'topic_distr', 'profile_prop']
;index_field_for_predictions = author_screen_name
;path = data/output/Kernel_Performance_Evaluator/

# **************** END FEATURE EXTRACTOR MODULES ******************************
[DataFrameCreator]
all_authors = True
normalize = False

;[DataExporter]
;#arff_file = 'data/output/clickbait_challenge_validation_training_set2.arff'
;arff_file = 'data/output/clickbait_small_training_set.arff'
;#author_type_classes = ["bad_actor", "good_actor"]
;author_type_classes = ["clickbait", "no-clickbait"]

;[Clickbait_Challenge_Evaluator]
;targeted_class_dict = {"no-clickbait" : 0, "clickbait": 1}
;targeted_class_field_names = ["author_type"]
;classifier_type_names = ["RandomForest", "DecisionTree", "AdaBoost", "XGBoost"]
;num_of_features = [5,10,20,'all']
;#num_of_features = [1,2,3,4,5,6,7,8, 'all']
;indentifier_field_name = author_screen_name
;feature_names_to_remove = ["author_guid", "author_sub_type", "author_screen_name", "set_affiliation"]
;replace_missing_values = zero
;selected_features = []
;order_of_results_dictionary = ['targeted_class_field_names', 'classifier_type_names', 'num_of_features']
;results_file_name = clickbait_challenge_small_training_set_results_results.txt
;results_table_file_name = clickbait_challenge_small_training_set_results_table.csv
;path = data/output/expermintal_environment/
;column_names_for_results_table = ["Targeted_class", "Selected_classifier", "Num_of_features", "Correctly_classified", "Incorrectly_classified", "Total", "AUC", "Accuracy", "Precision", "Recall"]
;full_path_model_directory = data/output/expermintal_environment/trained_classifiers/
;
;#DIVIDE TRAINING AND TEST SET BY FIELD NAME
;is_divide_to_training_and_test_sets_by_field_name_then_train_and_evaluate = False
;field_name_for_dividing_between_training_and_test_sets = set_affiliation
;
;#DIVIDE TRAINING AND TEST SET BY k-fold-cross-validation
;is_divide_to_training_and_test_sets_by_k_fold_cross_validation_then_train_and_evaluate = True
;k_for_fold = 10

;[Predictor]
;trained_classifier_file_name = 'trained_classifier_author_type_AdaBoost_10_features.pkl'
;best_features_file_name = 'trained_classifier_author_type_AdaBoost_10_selected_features.pkl'
;full_path_trained_classifier_directory = 'data/output/expermintal_environment/trained_classifiers/'
;path = 'data/output/expermintal_environment/'
;targeted_class_field_names = ['author_type']
;replace_missing_values = 'zero'
;indentifier_field_name = 'author_screen_name'
;feature_names_to_remove = ["author_guid", "author_sub_type", "author_screen_name", "set_affiliation"]
;selected_features = []
;targeted_class_dict = {"no-clickbait" : 0, "clickbait": 1}
;classifier_type_name = 'AdaBoost'
;num_of_features = 10

;[Clickbait_Challenge_Predictor]
;trained_classifier_file_name = 'trained_classifier_author_type_AdaBoost_10_features.pkl'
;best_features_file_name = 'trained_classifier_author_type_AdaBoost_10_selected_features.pkl'
;full_path_trained_classifier_directory = 'data/output/expermintal_environment/trained_classifiers/'
;path = 'data/output/expermintal_environment/'
;targeted_class_field_names = ['author_type']
;replace_missing_values = 'zero'
;indentifier_field_name = 'author_screen_name'
;feature_names_to_remove = ["author_guid", "author_sub_type", "author_screen_name", "set_affiliation"]
;selected_features = []
;targeted_class_dict = {"no-clickbait" : 0, "clickbait": 1}
;classifier_type_name = 'AdaBoost'
;num_of_features = 10
;json_results_file = 'data/output/expermintal_environment/results.jsonl'



;[ExperimentalEnvironment]
;perform_k_fold_cross_validation_and_predict = True
;k_for_fold = 10
;classifier_type_names = ["RandomForest", "DecisionTree", "AdaBoost", "XGBoost"]
;#classifier_type_names = ["RandomForest", "DecisionTree", "AdaBoost"]
;selected_features = []
;targeted_class_name = author_type
;removed_features = ["author_sub_type", "author_guid", "author_screen_name"]
;
;#optional_classes = ["good_actor", "bad_actor"]
;optional_classes = ["clickbait", "no-clickbait"]
;;#optional_classes = ["private", "company", "news_feed", "spammer", "bot"]
;index_field = author_screen_name
;#index_field = name
;results_file_name = clickbait_challenge_validation_training_set2_results.txt
;results_table_file_name = clickbait_challenge_validation_training_set2_table.csv
;path = data/output/expermintal_environment/
;backup_path = data\output\results\backup\
;is_rank_influential_features = False
;#num_of_features_to_train = ['all']
;num_of_features_to_train = [5,10,20,'all']
;#num_of_features_to_train = [1,2,3,4,5,6,7,8,'all']
;full_path_model_directory = data/output/expermintal_environment/trained_classifiers/
;order_of_results_dictionary = ['targeted_class_field_name', 'similarity_functions', 'k', 'decision_models', 'link_prediction_models']
;column_names_for_results_table = ["Targeted_class", "Selected_classifier", "Num_of_features", "Correctly_classified",
;                                    "Incorrectly_classified", "Total", "AUC", "Accuracy", "Precision", "Recall"
;                                 ]
;
;predict_on_prepared_clssifier = False
;prepared_classifier_name = trained_classifier_author_type_RandomForest_all_features.pkl
;#targeted_class_name = author_type
;num_of_features = '20'
;classifier_type_name = RandomForest
;train_one_class_classifier_and_predict = False
;train_one_class_classifier_by_k_best_and_predict = False
;
;replace_missing_values = 'zero'
;#replace_missing_values = 'mean'
;
;# delete columns with standard deviation less than this threshold
;stdev_threshold = 0.01
;feature_scaling = ['StandardScaler', 'RobustScaler', 'MinMaxScaler', 'None']
;#feature_scaling = ['None']
;feature_selection = ['f_classif', 'mutual_info_classif']
;############################################################################
;#################Transfer Learning##########################################
;#############################################################################
;transfer_learning = False
;
;#source_domain = 'manually_labeled'
;#source_domain = 'acquired_abusers'
;source_domain = 'honeypot'
;
;#'db': load authors and features from DB table 'authors_features' and train a new model.
;#'csv': load authors with their features from a csv file and trains new model.
;source_input_type = 'csv'
;#source_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[1]manually_good_and_bad_actors/bad_actors_manually_good_and_bad_only.csv'
;#source_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[2]verfied_abusers_and_unlabeled/acquired_dataset.csv'
;source_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[3]honeypot_bots/honeypot.csv'
;
;
;split_percentage = 0.8
;
;transfer_instances = True
;#transfer_algo = 'MODIFIED_BURAK'
;transfer_algo = 'MODIFIED_GRAVITY_WEIGHTING'
;num_neighbors = [1, 2, 3, 4, 5]
;
;#target_domain = 'manually_labeled'
;target_domain = 'acquired_abusers'
;#target_domain = 'honeypot'
;target_input_type = 'csv'
;#target_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[1]manually_good_and_bad_actors/bad_actors_manually_good_and_bad_only.csv'
;target_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[2]verfied_abusers_and_unlabeled/acquired_dataset.csv'
;#target_input_path = 'D:/SOMWEB/documents/Jorge Thesis/arff/[3]honeypot_bots/honeypot.csv
;
;target_train_test_split = 0.8
;#target_train_percent_limit is to keep only this percentage of examples in the training set, simulating a smaller target dataset
;target_train_percent_limit = 0.1
;target_test_percent_limit = 1
;#transfer_instances =False -> executes the same code but without transfering isntances (used to verify it is not transferring instances)
;transfer_instances = True
;transfer_algo = 'GRAVITY_WEIGHTING'
;#transfer_algo = 'BURAK'
;
;#for the BURAK algorihtm, set the number of neares neighbors to transfer, for GRAVITY_WEIGHTING set this value to -1
;#num_neighbors = [1,2,3,4,5,10]
;num_neighbors = [-1]


;[TopicDistrobutionVisualizationGenerator]
;# If it is false you should insert a CSV file under prediction_csv_path
;read_predictions_from_db = False
;include_unlabeled_predictions = True
;include_labeled_authors_in_visualization = True
;targeted_class_field_name = author_type
;optional_classes = {'good_actor': 0, 'bad_actor': 1}
;#prediction_csv_path = "data/output/topic_distribution_visualization/predictions.csv"
;prediction_csv_path = "data/output/topic_distribution_visualization/predictions_on_unlabeled_authors_author_type_XGBoost_all_features.csv"
;output_dir = "data/output/topic_distribution_visualization/"
;buckets = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

[Twitter_Rest_Api]
#can be 1, 2, or 3
working_app_number = 2
maximal_get_friend_ids_requests_in_window = 15
maximal_get_follower_ids_requests_in_window = 15
maximal_get_user_requests_in_window = 180
maximal_user_ids_allowed_in_single_get_user_request = 100
num_of_requests_without_checking = 9999999999
num_of_twitter_status_id_requests_without_checking = 9999999999
num_of_twitter_timeline_requests_without_checking = 9999999999
maximal_number_of_retrieved_users = 1000

;[BadActorsMarkup]
;bad_actors_file_name = vico_importer_bad_actors.csv
;potential_good_actors_file_name = potential_good_actors.csv
;path = data/output/
;backup_path = data\output\csv\backup\
;
;csv_header = [
;    "name", "domain", "author_guid", "author_screen_name", "author_full_name",
;    "author_osn_id", "description", "created_at", "statuses_count",
;    "followers_count", "favourites_count", "friends_count", "listed_count", "language",
;    "profile_background_color", "profile_background_tile", "profile_banner_url",
;    "profile_image_url", "profile_link_color", "profile_sidebar_fill_color", "profile_text_color",
;    "default_profile", "contributors_enabled", "default_profile_image", "geo_enabled", "protected",
;    "location", "notifications", "time_zone", "url", "utc_offset", "verified", "is_suspended_or_not_exists", "author_type",
;    "bad_actors_collector_insertion_date", "xml_importer_insertion_date", "vico_dump_importer_insertion_date",
;    "missing_data_complementor_insertion_date", "bad_actors_markup_insertion_date", "mark_missing_bad_actor_retweeters_insertion_date",
;    "author_sub_type"
;    ]
;
;[PostCSVExporter]
;path = data/output/
;#file_name = data/output/bad_actors.arff
;
;[MysqlConnector]
;host = localhost
;user = bgu
;pwd = 4002ebf464f7c42fd106b091640253d6
;schema = bgu
;
;[StatisticsProvider]
;
;
;[MissingVicoPostsRetriever]
;missing_retweets_not_retrived_from_vico_file_name = missing_retweets_not_retrived_from_vico.csv
;missing_tweets_not_retrived_from_vico_file_name = missing_tweets_not_retrived_from_vico.csv
;retweets_retrieved_from_vico_file_name = retweets_retrieved_from_vico.csv
;tweets_retrieved_from_vico_file_name = tweets_retrieved_from_vico.csv
;path = data/output/MissingVicoPostsRetriever/
;backup_path = data\output\MissingVicoPostsRetriever\Backup\
;csv_header = [
;    "post_twitter_id", "author", "content", "created_at", "url", "original_author_twitter_id", "original_author_screen_name"
;    ]
;csv_header_bad_actors_vico_retrieved_posts = [
;    "post_id", "author", "guid", "title", "url", "date", "content", "domain", "author_guid"
;    ]
;
;original_statuses = [
;    "https://twitter.com/annakiril3/status/745605511886835712",
;    "https://twitter.com/LeviAvavilevi/status/745606629098414080",
;    "https://twitter.com/benny_metanya/status/745598211977510912",
;    "https://twitter.com/meggiewill5/status/745604117083660288",
;    "https://twitter.com/amira_buzavgo/status/745925316707753984",
;    "https://twitter.com/TAringthon/status/745601324989947904",
;    ]
;
;[TimelineOverlapVisualizationGenerator]
;common_posts_threshold = 1
;# unlabeled bad author - an author that wasn't manually labeled, i.e. was automatically classified by the model as bad actor
;#unlabeled_bad_authors = ["NewAndroidApps", "PeopleSource_UK", "Niko360","couponsaday", "JuJu_Carbo","LearningroomLMS"]
;# labeled bad author - an author that was manually labeled as bad actor
;#labeled_bad_authors = ["nb95591", "T2Alice", "hjcbizsolutions"]
;output_dir = "overlapping_visualization"
;output_path = "data/output"
;
;;end_date =  ''



